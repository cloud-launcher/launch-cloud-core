{"version":3,"names":[],"mappings":"","sources":["admin.js"],"sourcesContent":["var fs = require('fs'),\n    path = require('path'),\n    repl = require('repl'),\n    glob = require('glob'),\n    request = require('request'),\n    polyfill = require('6to5/polyfill'),\n    g = require('generator-trees').g;\n\nconsole.log('generators', g);\n\n\n// var interleaved = g.interleave(function* () {\n//   var i = 99, a = 0;\n//   for (a = 0; a < 10; a++) yield y(a);\n//   return function* (a) { yield a.toString() + (++i); return a.toString() + (++i); }(a);\n\n//   function* y(a) { yield a.toString() + (++i); return a.toString() + (++i); }\n// }());\n\n// console.log(interleaved);\n\n// console.log(g.toArray(interleaved));\n\n// return;\n\nvar doWrapper = require('do-wrapper');\n\nvar doProvider = require('./providers/digitalocean')({token: process.env.DO_TOKEN});\n//var dummyProvider = require('./providers/dummy');\n\nvar provider = doProvider;\n// var provider = dummyProvider;\n\nvar launcher = require('./launcher')(provider, (...args) => console.log(new Date(), ...args));\n\nvar hogan = require('hogan.js');\nvar uuid = require('node-uuid');\nvar _ = require('lodash');\n\n\nvar keys = ['40:85:f0:9b:28:ad:5d:25:b5:51:2e:ad:f3:b3:31:98'];\n\nvar baseDir = path.join(__dirname, '..');\n\nvar cloud_config = fs.readFileSync(path.join(baseDir, 'cloud-config')).toString();\nvar bootstrapTemplate = fs.readFileSync(path.join(baseDir, 'bootstrap.sh.template')).toString();\n\ncloud_config = hogan.compile(cloud_config);\nbootstrapTemplate = hogan.compile(bootstrapTemplate);\n\nvar service_files = glob.sync('../services/**/*.service');\n\nvar services = _.reduce(service_files, (result, fileName) => {\n  var name = fileName.substring(fileName.lastIndexOf('/') + 1, fileName.lastIndexOf('.service'));\n\n  result[name] = {\n    name: name,\n    command: 'start',\n    content: fs.readFileSync(fileName).toString()\n  };\n\n  return result;\n}, {});\n\nvar log = (...args) => console.log(...args);\n\n// launchCluster(doProvider);\nlaunchCluster(provider, log)\n  .then(machines => console.log('launched', machines.length, 'machines'),\n        error => console.log('error', error));\n\nfunction launchCluster(provider, log) {\n  console.log(provider);\n  return new Promise((resolve, reject) => {\n    request('https://discovery.etcd.io/new', (error, response, discovery_url) => {\n      if (error) {\n        console.log('Error getting discovery url!');\n        return false;\n      }\n\n      log('seed', discovery_url);\n\n      var create = (count, role) => {\n        var location = 'sfo1',\n            size = '512mb',\n            image = 'coreos-alpha',\n            then = () => {};\n\n        var launch = () => {\n          return _.map(_.range(count), i => {\n\n            var id = uuid.v4();\n\n            var machine = {\n              provider: provider.name,\n              location,\n              role,\n              image,\n              size,\n              id,\n              requested: new Date().getTime()\n            };\n\n            var metadata = _.map(machine, (value, key) => key + '=' + value).join(',');\n\n            var files = getFiles(machine);\n\n            var userData = cloud_config.render({discovery_url, metadata, files});\n\n            return {\n              id,\n              provider: provider.name,\n              location,\n              size,\n              image,\n              keys,\n              userData\n            };\n          });\n        };\n\n        // This will cause launch to fire at the end of the chain\n        //setImmediate(launch);\n\n        var chain = (() => {\n          return fn => {\n            fn();\n            return chain;\n          };\n        })();\n\n        chain.at = l => chain(() => location = l);\n        chain.size = s => chain(() => size = s);\n        chain.then = t => chain(() => then = t);\n        chain.launch = launch;\n\n        return chain;\n      };\n\n      var machines = _.flatten([\n        create(1, 'core').at('sfo1').launch(),\n        create(0, 'benchmarker').at('sfo1').launch(),\n        create(0, 'influxdb').at('sfo1').size('2gb').launch(),\n        create(0, 'grafana').at('sfo1').launch(),\n        create(0, 'broadcaster').at('sfo1').launch()\n      ]);\n\n      // how do we generate the machines on demand instead of all up front?\n      launcher.launch(machines).then(machines => {\n        console.log('All machines launched!');\n        fs.writeFileSync(path.join(baseDir, 'cloud.machines'), JSON.stringify(machines));\n        resolve(machines);\n      }, error => reject(error))\n      .catch(error => reject(error));\n    });\n  });\n}\n\nvar roleServices = {\n  'core': [\n    'cadvisor'\n  ],\n  'influxdb': [\n    'cadvisor',\n    'influxdb'\n  ],\n  'grafana': [\n    'cadvisor',\n    'grafana'\n  ],\n  'broadcaster': [\n    'cadvisor',\n    'broadcaster@'\n  ],\n  'benchmarker': [\n    'cadvisor',\n    'benchmarker'\n  ]\n};\n\nfunction getFiles(machine) {\n  var {id, role} = machine;\n\n  var services = roleServices[role];\n\n  var bootstrap = {\n    path: '/home/core/bootstrap.sh',\n    owner: 'core',\n    permissions: '0700',\n    content: indent(bootstrapTemplate.render({services: _.map(services, serviceName => {return {fileName: serviceName + '.service', name: serviceName + (serviceName.indexOf('@') >= 0 ? id : '')};})}), '      ')\n  };\n\n  var util = {\n    path: '/home/core/util.sh',\n    owner: 'core',\n    permissiosn: '0700',\n    content: indent()\n  };\n\n  return [bootstrap, util].concat(_.map(services, makeFileRecord));\n}\n\nfunction makeFileRecord(serviceName) {\n  var service = services[serviceName];\n\n  if (!service) {\n    console.log(serviceName, 'not found!');\n  }\n\n  return {\n    path: '/home/core/' + serviceName + '.service',\n    owner: 'core',\n    permissions: '0600',\n    content: indent(service.content, '      ')\n  };\n}\n\nfunction indent(s, i) {\n  return s.replace(/^/gm, i);\n}\n\n// function chainable(launch, methods) {\n\n//   setImmediate(launch);\n\n//   for (var name in methods) {\n//     chain[name] = (args...) => chain(methods[name]);\n//   }\n\n//   return chain;\n\n//   function chain(fn) {\n//     fn();\n//     return chain;\n//   }\n// }"],"file":"admin.js","sourceRoot":"/source/"}