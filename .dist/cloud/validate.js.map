{"version":3,"names":[],"mappings":"","sources":["cloud/validate.js"],"sourcesContent":["import buildLog from './buildLog';\n\nimport _ from 'lodash';\n\nmodule.exports = (cloud, providers, logFn, request, dockerHubApiRoot) => {\n  const {log, start, ok, bad} = buildLog(logFn, 'Validate');\n\n  start('Cloud Description');\n\n  const {\n    domain,\n    root,\n    authorizations,\n    locations,\n    configuration,\n    roles,\n    containers\n  } = cloud;\n\n  const promise = validateDomain(cloud)\n          .then(validateRoot)\n          .then(validateAuthorizations)\n          .then(validateLocations)\n          .then(validateProviderCredentials)\n          .then(validateContainers)\n          .then(validateRoles)\n          .then(validateConfiguration)\n          .then(() => {\n            ok('Cloud Description');\n            return cloud;\n          });\n\n  promise.catch(error => {\n    return bad('Cloud Description', {error});\n  });\n\n  return promise;\n\n  function validateDomain() {\n    return new Promise((resolve, reject) => {\n      if (cloud.domain) {\n        start('Domain');\n        ok('Domain');\n      }\n\n      resolve();\n    });\n  }\n\n  function validateRoot() {\n    return new Promise((resolve, reject) => {\n      if (cloud.root) {\n        start('Root');\n        ok('Root');\n      }\n\n      resolve();\n    });\n  }\n\n  function validateAuthorizations() {\n    return new Promise((resolve, reject) => {\n      if (cloud.authorizations) {\n        start('Authorizations');\n        ok('Authorizations');\n      }\n\n      resolve();\n    });\n  }\n\n  // TODO: This can probably be cleaned up.\n  function validateLocations() {\n    return new Promise((resolve, reject) => {\n      start('Locations');\n\n      const invalidProviders = _.filter(_.keys(locations), providerName => !providers[providerName]);\n\n      if (invalidProviders.length > 0) {\n        return reject(bad('Locations', {invalidProviders}));\n      }\n\n      const invalidLocations = _.pick(\n                                  _.mapValues(locations, (locations, providerName) => {\n                                    const provider = providers[providerName];\n                                    return _.filter(locations, location => !provider.profile.locations[location]);\n                                  }),\n                                  locations => locations.length > 0);\n\n      if (_.keys(invalidLocations).length > 0) {\n        return reject(bad('Locations', {invalidLocations}));\n      }\n\n      let providerCount = 0;\n      const locationCount = _.reduce(locations, (count, locations, providerName) => {\n        const provider = providers[providerName];\n\n        if (locations.length) providerCount++;\n\n        return count + locations.length;\n      }, 0);\n\n      if (isNaN(locationCount) || locationCount === 0) {\n        return reject(bad('Locations', {status: 'No locations selected!'}));\n      }\n\n      ok('Locations', {status: `Will Launch on ${providerCount} Provider${providerCount > 1 ? 's' : ''} in ${locationCount} Location${locationCount > 1 ? 's' : ''}!`});\n\n      resolve();\n    });\n  }\n\n  function validateProviderCredentials() {\n    return new Promise((resolve, reject) => {\n      start('Credentials');\n\n      const usedProviders = _.map(_.pick(cloud.locations, locations => {\n        return locations.length > 0;\n      }), (locations, providerName) => providers[providerName]);\n\n      const missing = {};\n\n      _.each(usedProviders, provider => {\n        const missingValues = checkProviderConfiguration(provider);\n        if (missingValues.length > 0) missing[provider.name] = missingValues;\n      });\n\n      if (_.keys(missing).length > 0) {\n        return reject(bad('Credentials', {missing}));\n      }\n\n      Promise\n        .all(_.map(usedProviders, provider => provider.api.verifyAccount()))\n        .then((error, data, response) => {\n          ok('Credentials');\n          resolve();\n        })\n        .catch(e => {\n          const {error, data, response, provider} = e;\n          reject(bad('Credentials', {error, data, provider}));\n        });\n\n      function checkProviderConfiguration(provider) {\n        const {credentialSchema, credentials} = provider,\n              missing = [];\n\n        _.each(credentialSchema, (schema, name) => {\n          const value = credentials[name];\n\n          // Just basic checks for now\n          if (value === undefined ||\n              value === null ||\n              value.length === 0) {\n            missing.push(name);\n          }\n        });\n\n        return missing;\n      }\n    });\n  }\n\n  function validateContainers() {\n    start('Containers');\n\n    let requests = {},\n        validationFailed = false;\n\n    const validationPromise = Promise.all(_.map(containers, (containerDescription, name) => {\n      // return checkDockerRegistry(containerDescription.container || name);\n      return checkDockerRegistry(containerDescription.name || name);\n    }));\n\n    validationPromise.catch(e => {\n      log('validateContainers failed');\n      _.each(requests, (request, url) => {\n        log('Aborting', url);\n        request.abort();\n      });\n      bad('Containers');\n    });\n\n    return validationPromise\n            .then(value => {\n              ok('Containers');\n              return value;\n            });\n\n    function checkDockerRegistry(containerName) {\n      return new Promise((resolve, reject) => {\n        start('Container', {containerName});\n\n        const matches = containerName.match(/([^\\/]*)(?:\\/([^:]*))?(?::(\\w*))?/);\n\n        if (!matches) {\n          reject(bad('Container', {containerName, message: 'Could not parse'}));\n          return;\n        }\n\n        const namespace = matches[1],\n              image = matches[2],\n              tag = matches[3] || 'latest',\n              qualifiedName = namespace + (image ? `/${image}` : ''),\n              url = `${dockerHubApiRoot}/v1/repositories/${qualifiedName}/tags/${tag}`;\n\n        requests[url] = request(url, (error, response, body) => {\n          delete requests[url];\n\n          if (error) reject({type: 'HubConnection', message: 'Could not connect!', error});\n          else {\n            const {statusCode} = response;\n\n            if (statusCode === 200) {\n              ok('Container', {containerName, tag});\n              resolve();\n            }\n            else if (statusCode === 404) {\n              reject(bad('Container', {containerName, tag, message: 'Does not exist!'}));\n            }\n            else {\n              reject(bad('Container', {containerName, tag, statusCode}));\n            }\n          }\n        });\n      });\n    }\n  }\n\n  function validateRoles() {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  function validateConfiguration() {\n    return new Promise((resolve, reject) => {\n      // log('Validating Configuration', cloud);\n      start('Configuration');\n      ok('Configuration');\n      resolve();\n    });\n  }\n};"],"file":"cloud/validate.js","sourceRoot":"/source/"}