{"version":3,"names":[],"mappings":"","sources":["cloud/destroy.js"],"sourcesContent":["import buildLog from './buildLog';\n\nimport _ from 'lodash';\nimport gt from 'generator-trees';\n\nconst {g, p} = gt;\n\nmodule.exports = (cloud, providers, logFn) => {\n  const {log, start, ok, bad} = buildLog(logFn, 'Destroy');\n\n  const {\n    id,\n    clusters\n  } = cloud;\n\n  return destroy(cloud);\n\n  function destroy(cloud) {\n    start('Cloud', {cloud});\n\n    const clustersByProvider = _.groupBy(clusters, cluster => { return cluster.provider; });\n\n    const destroyPromise = Promise.all(_.map(clustersByProvider, destroyProviderClusters))\n      .then(clusters => {\n        ok('Cloud', {cloud});\n        return cloud;\n      });\n\n    destroyPromise.catch(error => {\n      bad('Cloud', {error});\n    });\n\n    return destroyPromise;\n  }\n\n  function destroyProviderClusters(clusters, providerName) {\n    return new Promise((resolve, reject) => {\n      const provider = providers[providerName];\n\n      p.async(\n          provider.api.MAX_CONCURRENT_CALLS,\n          g.map(\n            g.interleave(\n              g.map(\n                g.toGenerator(clusters),\n                cluster =>\n                  g.toGenerator(\n                    _.map(cluster.machines,\n                          (machine, id) => { return machine; })))\n            ),\n            machine => new Promise((resolve, reject) => {\n              start('Machine', {machine});\n\n              provider\n                .api\n                .destroyMachine(machine)\n                .then(\n                  response => {\n                    ok('Machine', {machine, response});\n                    resolve(machine);\n                  },\n                  error => reject(bad('Machine', {machine, error}))\n                );\n            })\n          ),\n          (machine, machinesDestroyedSoFar) => {\n            log('destroyed', machine, machinesDestroyedSoFar);\n          }\n        )\n        .then(\n          count => {\n            resolve(count);\n          },\n          error => reject(bad('Cloud', {providerName, error}))\n        );\n    });\n  }\n};"],"file":"cloud/destroy.js","sourceRoot":"/source/"}