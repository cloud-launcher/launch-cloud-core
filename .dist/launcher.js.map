{"version":3,"names":[],"mappings":"","sources":["launcher.js"],"sourcesContent":["import hjson from 'hjson';\nimport _ from 'lodash';\nimport request from 'request';\n\nimport providers from './providers';\n\nmodule.exports = (out) => {\n  return {launch};\n\n  async function launch(text) {\n    console.log('launch');\n    await parse(text)\n            .then(validate)\n            .then(generatePlan)\n            .then(executePlan);\n\n    async function parse(text) {\n      console.log('parse');\n      return hjson.parse(text.toString());\n      // return new Promise((resolve, reject) => {\n      //   try {\n      //     resolve(hjson.parse(description.toString()));\n      //   }\n      //   catch (ex) { reject(ex); }\n      // });\n    }\n\n    function validate(description) {\n      const {domain, root, authorizations, locations, configuration, roles, containers} = description;\n      return validateDomain(description)\n              .then(validateRoot)\n              .then(validateAuthorizations)\n              .then(validateLocations)\n              .then(validateContainers)\n              .then(validateRoles)\n              .then(validateConfiguration)\n              .then(() => { return description; });\n\n      async function validateDomain() {\n        console.log('Validating Domain');\n      }\n\n      function validateRoot() {\n        console.log('Validating Root');\n      }\n\n      function validateAuthorizations() {\n        console.log('Validating Authorizations');\n      }\n\n      function validateLocations() {\n        console.log('Validating Locations');\n\n        _.each(locations, (locations, providerName) => {\n          const provider = providers[providerName];\n\n          if (!provider) throw new Error(['No provider with name', providerName].join(' '));\n\n          _.each(locations, location => {\n            if (provider.profile.locations[location]) {\n              throw new Error(['Provider', providerName, 'has no location', location].join(' '));\n            }\n          });\n        });\n      }\n\n      async function validateContainers() {\n        console.log('Validating Containers');\n        //await ratelimit(3, )\n        return Promise\n                  .all(_.map(containers, (containerDescription, name) => {\n                    const [namespace, image] = containerDescription.container.split('/'),\n                          [repository, tag] = image.split(':');\n\n                    return checkDockerRegistry(namespace, repository, tag);\n                  }));\n\n        async function checkDockerRegistry(namespace, repository, tag) {\n          tag = tag || 'latest';\n          const url = `https://registry.hub.docker.com/v1/repositories/${namespace}/${repository}/tags/${tag}`;\n          // console.log(`Looking for container ${namespace}/${repository}:${tag} at ${url}`);\n\n          await promise(request, url)\n                  .then(\n                    response => {\n                      if (response.statusCode === 200) {\n                        console.log(`Found ${namespace}/${repository}:${tag}`);\n                      }\n                      else throw new Error(`Did not find ${namespace}/${repository}:${tag} on Docker registry!`);\n                    },\n                    error => { throw new Error(['Error checking Docker registry', error].join(' ')); });\n        }\n      }\n\n      function validateRoles() {\n        return new Promise((resolve, reject) => {\n          resolve();\n        });\n      }\n\n      function validateConfiguration() {\n        return new Promise((resolve, reject) => {\n          resolve();\n        });\n      }\n    }\n\n    function generatePlan() {\n      console.log('generatePlan');\n    }\n\n    function executePlan() {\n      console.log('executePlan');\n    }\n  }\n};\n\nasync function ratelimit(count, gen) {\n  // await\n}\n\nfunction promise(fn, ...args) {\n  return new Promise((resolve, reject) => {\n    fn(...args, (error, ...rest) => {\n      if (error) reject(error);\n      else resolve(...rest);\n    });\n  });\n}"],"file":"launcher.js","sourceRoot":"/source/"}