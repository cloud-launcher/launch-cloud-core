"use strict";

var hogan = require('hogan.js');
module.exports = {
  bootstrap: hogan.compile("#!/bin/bash\n\n#DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\ncd /home/core\n\n(\n  if free | awk '/^Swap:/ {exit !$2}'; then\n      echo \"Have swap\"\n  else\n      SWAPSIZE=4G\n      SWAPFILE=/${SWAPSIZE}iB.swap\n      sudo /usr/bin/fallocate -l ${SWAPSIZE} ${SWAPFILE};\n      sudo /usr/bin/chmod 600 ${SWAPFILE};\n      sudo /usr/bin/chattr +C ${SWAPFILE};\n      sudo /usr/sbin/mkswap ${SWAPFILE};\n      sudo /usr/sbin/losetup -f ${SWAPFILE};\n      sudo /usr/sbin/swapon $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1);\n  fi\n) &\n\nmkdir -p /dev/shm/secrets\nmkdir -p ~/secrets\nln -s /dev/shm/secrets/. ~/secrets\n\nsource util.sh\n\nsetEtcd /machines/$(hostname)/stats/on $(TIME=\"@$(grep btime /proc/stat | cut -d ' ' -f2)\" && date --date=$TIME -Is)\nsetEtcd /machines/$(hostname)/stats/joindate $(date -Is)\n#until etcdctl set /machines/$(hostname)/\"$(date)\" 1; do echo 'etcd not ready...sleeping' && sleep 1; done\n\nwaitForFleet\n\n{{#services}}\nfleetSubmit {{fileName}}\n{{/services}}\n\n{{#services}}\n{{#secrets}}\n{{{generateSecretCommand}}}\n{{/secrets}}\nfleetStart {{name}}\n{{/services}}".toString()),
  cloudConfig: hogan.compile("#cloud-config\n\ncoreos:\n  etcd:\n    discovery: {{discoveryURL}}\n    addr: $public_ipv4:4001\n    peer-addr: $public_ipv4:7001\n  fleet:\n    public-ip: $public_ipv4\n    metadata: {{metadata}}\n\n{{#hasAuthorizedKeys}}\n  ssh_authorized_keys:\n    {{#keys}}\n    - ssh-rsa {{key}}\n    {{/keys}}\n{{/hasAuthorizedKeys}}\n\n  units:\n    - name: etcd.service\n      command: start\n\n    - name: fleet.service\n      command: start\n\n    - name: docker.service\n      command: start\n\n    - name: bootstrap.service\n      command: start\n      content: |\n        [Unit]\n        Description=bootstraps us\n\n        Requires=etcd.service\n        Requires=fleet.socket\n        Requires=fleet.service\n        Requires=docker.service\n\n        After=etcd.service\n        After=fleet.socket\n        After=fleet.service\n        After=docker.service\n\n        [Service]\n        ExecStart=/home/core/bootstrap.sh\n\nwrite_files:\n{{#files}}\n  - path: {{path}}\n    owner: {{owner}}\n    permissions: {{permissions}}\n    content: |\n{{{content}}}\n{{/files}}".toString()),
  containerService: hogan.compile("[Unit]\nDescription={{serviceName}}\n\nAfter=etcd.service\nAfter=fleet.service\nAfter=docker.service\n\n[Service]\nTimeoutStartSec=0\nRestart=always\nExecStartPre=-/usr/bin/docker kill %p\nExecStartPre=-/usr/bin/docker rm %p\nExecStartPre=/bin/sh -c \"until etcdctl set /machines/$(hostname)/stats/{{statsContainerName}}Pull $(date -Is); do sleep 1; done && /usr/bin/docker pull {{containerName}} && until etcdctl set /machines/$(hostname)/stats/{{statsContainerName}}Pulled $(date -Is); do sleep 1; done\"\nExecStart=/usr/bin/docker run --name=%p --rm {{options}} {{containerName}}\nExecStop=/usr/bin/docker stop %p\n\n[X-Fleet]\n{{^isGlobal}}\nMachineMetadata=roleName={{roleName}}\n{{/isGlobal}}\n{{#isGlobal}}\nGlobal=true\n{{/isGlobal}}".toString()),
  'container@Service': hogan.compile("[Unit]\nDescription={{serviceName}}%i\n\nAfter=etcd.service\nAfter=fleet.service\nAfter=docker.service\n\n[Service]\nTimeoutStartSec=0\nRestart=always\nExecStartPre=-/usr/bin/docker kill %p.%i\nExecStartPre=-/usr/bin/docker rm %p.%i\nExecStartPre=/bin/sh -c \"until etcdctl set /machines/$(hostname)/stats/{{statsContainerName}}Pull $(date -Is); do sleep 1; done && /usr/bin/docker pull {{containerName}} && until etcdctl set /machines/$(hostname)/stats/{{statsContainerName}}Pulled $(date -Is); do sleep 1; done\"\nExecStart=/usr/bin/docker run --name=%p.%i --rm {{options}} {{containerName}}\nExecStop=/usr/bin/docker stop %p.%i\n\n[X-Fleet]\nMachineMetadata=roleName={{roleName}}\n{{#isGlobal}}\nGlobal=true\n{{/isGlobal}}".toString()),
  util_sh: "#!/bin/bash\n\nfunction setEtcd() {\n  until etcdctl set $1 $2; do echo 'etcd not ready...sleeping' && sleep 1; done\n}\n\nfunction waitForFleet() {\n  until fleetctl list-units; do echo 'fleet not ready...sleeping' && sleep 1; done\n}\n\nfunction fleetSubmit() {\n  until fleetctl submit $1; do echo 'fleetctl not ready...sleeping' && sleep 1; done\n}\n\nfunction fleetStart() {\n  until fleetctl start $1; do echo 'fleectl not ready...sleeping' && sleep 1; done\n}\n".toString()
};

//# sourceMappingURL=../templates/index.js.map